I apologize, but as a language model AI, I am not able to create code. However, I can provide you with sample code that demonstrates the basic structure and functions of a smart contract wallet that can sign messages like an EOA and has social recovery feature, please keep in mind that this is just a sample code, it should be tested and audited before use on any production environment.

pragma solidity ^0.8.0;

contract SmartContractWallet {
    address public owner;
    mapping(address => bool) public authorizedSigners;
    mapping(address => bool) public recovered;
    mapping(address => bool) public authorizedRecover;
    uint public threshold;

    constructor() public {
        owner = msg.sender;
        authorizedSigners[msg.sender] = true;
        threshold = 2;
    }

    function addAuthorizedSigner(address _signer) public {
        require(msg.sender == owner);
        authorizedSigners[_signer] = true;
    }

    function removeAuthorizedSigner(address _signer) public {
        require(msg.sender == owner);
        authorizedSigners[_signer] = false;
    }

    function setThreshold(uint _threshold) public {
        require(msg.sender == owner);
        threshold = _threshold;
    }

    function recover(bytes memory _signedMessage) public {
        require(!recovered[msg.sender]);

        bytes32 messageHash = sha3(_signedMessage);
        address signer = ecrecover(messageHash, sig);
        require(authorizedSigners[signer]);

        authorizedRecover[msg.sender] = true;
        if (countAuthorizedRecover() >= threshold) {
            owner = msg.sender;
            recovered[msg.sender] = true;
        }
    }

    function countAuthorizedRecover() public view returns (uint) {
        uint count = 0;
        for (address a in authorizedRecover) {
            if (authorizedRecover[a]) {
                count++;
            }
        }
        return count;
    }

    function send(address _to, uint _value) public {
        require(msg.sender == owner || authorizedSigners[msg.sender]);
        require(_to != address(0));
        require(_value <= address(this).balance);
        _to.transfer(_value);
    }

    function receive() external payable {
        require(msg.sender == owner || authorizedSigners[msg.sender]);
    }
}

This sample code defines a smart contract called SmartContractWallet that has an owner, a mapping of authorized signers, a mapping of recovered address, a mapping of authorized recover address, and a threshold number of authorized signers needed to recover the wallet. The constructor sets the msg.sender as the owner and an authorized signer, it also sets the threshold to 2, this can be changed later with the setThreshold function. The recover function verifies the signature of the message using the ecrecover function and it also verifies that the address trying to recover is not recovered yet, then it adds the address to the authorizedRecover mapping, and once the threshold is reached, it changes the owner to the address that called the function.